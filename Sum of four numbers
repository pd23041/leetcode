# 解决方案和三数之和相似 甚至多数之和也可以用这个思路
# 多一个循环 复杂度O（n*2）
class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        result = []
        nums.sort()
        n = len(nums)
        for i in range(n-3): # 注意取值 避免越界
            # if  nums[i] > target and nums[i] > 0 and target > 0:
            #     break
            if i >0 and nums[i] == nums[i -1]:  # 去重
                continue    
            for j in range(i+1, n-2):  # 注意取值 避免越界
                if j > i + 1 and nums[j] == nums[j - 1]:     # 去重
                    continue

                left = j + 1
                right = n -1
                while left < right:  # 步骤同三数之和一样
                    sums = nums[i] + nums[j] + nums[left] + nums[right]
                    if sums > target:
                        right -= 1
                    elif sums < target:
                        left += 1
                    else:
                        result.append([nums[i],nums[j],nums[left],nums[right]])
                        while left < right and nums[right] == nums[right - 1]: # 同时满足 避免冲突
                            right -= 1
                        while left < right and nums[left] == nums[left + 1]:
                            left += 1

                        right -= 1
                        left += 1

        return result

